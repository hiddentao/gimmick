"use strict";

var _ = require('lodash'),
  debug = require('debug')('tracejs-instrumenter'),
  esprima = require('esprima');



var Instrumenter = exports.Instrumenter = function() {
  this._definitions = [];
  this._stack = [];
};


/**
 * Process given AST node.
 * 
 * @param  {Object} ast An AST generated by `esprima`.
 */
Instrumenter.prototype.process = function(ast) {
  this._process(ast);
};



Instrumenter.prototype._process = function(node) {
  if (node.type) {
    debug('process ' + node.type);

    var fn = this['_process' + node.type];

    if (fn) {
      fn.call(this, node);
    }
  }
};


Instrumenter.prototype._processChildren = function(node) {
  var key;

  for (key in node) {
    this._process(node[key]);
  };
};


Instrumenter.prototype._processProgram = function(node) {
  this._processChildren(node.body);
};


Instrumenter.prototype._processExpressionStatement = function(node) {
  this._process(node.expression);
};



Instrumenter.prototype._processAssignmentExpression = function(node) {
  this._processChildren(node.right);
};



Instrumenter.prototype._processCallExpression = function(node) {
  this._process(node.callee);
};


Instrumenter.prototype._processVariableDeclaration = function(node) {
  this._processChildren(node.declarations);
};


Instrumenter.prototype._processReturnStatement = function(node) {
  this._process(node.argument);
};


Instrumenter.prototype._processVariableDeclarator = function(node) {
  this._process(node.init);
};


Instrumenter.prototype._processSwitchStatement = function(node) {
  this._process(node.discriminant);
  this._processChildren(node.cases);
};


Instrumenter.prototype._processSwitchCase = function(node) {
  this._processChildren(node.consequent);
};


Instrumenter.prototype._processIfStatement = function(node) {
  this._processChildren(node.test);
  this._processChildren(node.consequent);
};


Instrumenter.prototype._processWithStatement = function(node) {
  this._processChildren(node.object);
  this._processChildren(node.body);
};


Instrumenter.prototype._processFunctionDeclaration = function(node) {
  this._processFunctionExpression(node);
};


Instrumenter.prototype._processFunctionExpression = function(node) {
  var currentFn = {
    name: (node.id && node.id.Identifier && node.id.Identifier.name ? node.id.Identifier.name : 'anon'),
    loc: _.cloneDeep(node.loc),
  };

  this._definitions.push(currentFn);
  currentFn.id = this._definitions.length - 1;

  // push onto stack
  this._stack.push(currentFn);

  // process body
  this._process(node.body);

  // pop from stack
  if (this._stack.length 
      && currentFn === this._stack[this._stack.length - 1]) {
    this._stack.pop();
  }
};



Instrumenter.prototype._processBlockStatement = function(node) {
  var self = this;

  var block = this._stack.length
    ? this._stack[this._stack.length - 1]
    : null;

  this._processChildren(node.body);

  // entry-point logging
  node.body.unshift(esprima.parse('_tjs.push([' + block.id + ', 1, Date.now()]);'));

  // exit-point logging
  node.body.push(esprima.parse('_tjs.push([' + block.id + ', 2, Date.now()]);'));
};



Instrumenter.prototype.getDefinitions = function() {
  return this._definitions;
};


